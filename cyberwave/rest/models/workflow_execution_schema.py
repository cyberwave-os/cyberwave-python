# coding: utf-8

"""
    Cyberwave API

    Cyberwave platform REST API. Use 'Bearer YOUR_TOKEN' for authentication.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from cyberwave.rest.models.workflow_node_execution_schema import WorkflowNodeExecutionSchema
from typing import Optional, Set
from typing_extensions import Self

class WorkflowExecutionSchema(BaseModel):
    """
    WorkflowExecutionSchema
    """ # noqa: E501
    uuid: StrictStr
    workflow_uuid: StrictStr
    status: StrictStr
    triggered_by: Optional[StrictStr]
    trigger_data: Dict[str, Any]
    started_at: datetime
    finished_at: Optional[datetime]
    error_message: StrictStr
    metadata: Dict[str, Any]
    node_executions: Optional[List[WorkflowNodeExecutionSchema]] = None
    __properties: ClassVar[List[str]] = ["uuid", "workflow_uuid", "status", "triggered_by", "trigger_data", "started_at", "finished_at", "error_message", "metadata", "node_executions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WorkflowExecutionSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in node_executions (list)
        _items = []
        if self.node_executions:
            for _item_node_executions in self.node_executions:
                if _item_node_executions:
                    _items.append(_item_node_executions.to_dict())
            _dict['node_executions'] = _items
        # set to None if triggered_by (nullable) is None
        # and model_fields_set contains the field
        if self.triggered_by is None and "triggered_by" in self.model_fields_set:
            _dict['triggered_by'] = None

        # set to None if finished_at (nullable) is None
        # and model_fields_set contains the field
        if self.finished_at is None and "finished_at" in self.model_fields_set:
            _dict['finished_at'] = None

        # set to None if node_executions (nullable) is None
        # and model_fields_set contains the field
        if self.node_executions is None and "node_executions" in self.model_fields_set:
            _dict['node_executions'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WorkflowExecutionSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "uuid": obj.get("uuid"),
            "workflow_uuid": obj.get("workflow_uuid"),
            "status": obj.get("status"),
            "triggered_by": obj.get("triggered_by"),
            "trigger_data": obj.get("trigger_data"),
            "started_at": obj.get("started_at"),
            "finished_at": obj.get("finished_at"),
            "error_message": obj.get("error_message"),
            "metadata": obj.get("metadata"),
            "node_executions": [WorkflowNodeExecutionSchema.from_dict(_item) for _item in obj["node_executions"]] if obj.get("node_executions") is not None else None
        })
        return _obj


