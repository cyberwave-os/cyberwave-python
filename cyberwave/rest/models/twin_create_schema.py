# coding: utf-8

"""
    Cyberwave API

    Cyberwave platform REST API. Use 'Bearer YOUR_TOKEN' for authentication.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class TwinCreateSchema(BaseModel):
    """
    TwinCreateSchema
    """ # noqa: E501
    name: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    asset_uuid: Optional[StrictStr] = None
    environment_uuid: Optional[StrictStr] = None
    position_x: Optional[Union[StrictFloat, StrictInt]] = 0.0
    position_y: Optional[Union[StrictFloat, StrictInt]] = 0.0
    position_z: Optional[Union[StrictFloat, StrictInt]] = 0.0
    rotation_w: Optional[Union[StrictFloat, StrictInt]] = 1.0
    rotation_x: Optional[Union[StrictFloat, StrictInt]] = 0.0
    rotation_y: Optional[Union[StrictFloat, StrictInt]] = 0.0
    rotation_z: Optional[Union[StrictFloat, StrictInt]] = 0.0
    scale_x: Optional[Union[StrictFloat, StrictInt]] = 1.0
    scale_y: Optional[Union[StrictFloat, StrictInt]] = 1.0
    scale_z: Optional[Union[StrictFloat, StrictInt]] = 1.0
    joint_calibration: Optional[Dict[str, Any]] = None
    metadata: Optional[Dict[str, Any]] = None
    __properties: ClassVar[List[str]] = ["name", "description", "asset_uuid", "environment_uuid", "position_x", "position_y", "position_z", "rotation_w", "rotation_x", "rotation_y", "rotation_z", "scale_x", "scale_y", "scale_z", "joint_calibration", "metadata"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TwinCreateSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if asset_uuid (nullable) is None
        # and model_fields_set contains the field
        if self.asset_uuid is None and "asset_uuid" in self.model_fields_set:
            _dict['asset_uuid'] = None

        # set to None if environment_uuid (nullable) is None
        # and model_fields_set contains the field
        if self.environment_uuid is None and "environment_uuid" in self.model_fields_set:
            _dict['environment_uuid'] = None

        # set to None if joint_calibration (nullable) is None
        # and model_fields_set contains the field
        if self.joint_calibration is None and "joint_calibration" in self.model_fields_set:
            _dict['joint_calibration'] = None

        # set to None if metadata (nullable) is None
        # and model_fields_set contains the field
        if self.metadata is None and "metadata" in self.model_fields_set:
            _dict['metadata'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TwinCreateSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "description": obj.get("description"),
            "asset_uuid": obj.get("asset_uuid"),
            "environment_uuid": obj.get("environment_uuid"),
            "position_x": obj.get("position_x") if obj.get("position_x") is not None else 0.0,
            "position_y": obj.get("position_y") if obj.get("position_y") is not None else 0.0,
            "position_z": obj.get("position_z") if obj.get("position_z") is not None else 0.0,
            "rotation_w": obj.get("rotation_w") if obj.get("rotation_w") is not None else 1.0,
            "rotation_x": obj.get("rotation_x") if obj.get("rotation_x") is not None else 0.0,
            "rotation_y": obj.get("rotation_y") if obj.get("rotation_y") is not None else 0.0,
            "rotation_z": obj.get("rotation_z") if obj.get("rotation_z") is not None else 0.0,
            "scale_x": obj.get("scale_x") if obj.get("scale_x") is not None else 1.0,
            "scale_y": obj.get("scale_y") if obj.get("scale_y") is not None else 1.0,
            "scale_z": obj.get("scale_z") if obj.get("scale_z") is not None else 1.0,
            "joint_calibration": obj.get("joint_calibration"),
            "metadata": obj.get("metadata")
        })
        return _obj


