# coding: utf-8

"""
    Cyberwave API

    Cyberwave platform REST API. Use 'Bearer YOUR_TOKEN' for authentication.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class WorkflowNodeSchema(BaseModel):
    """
    WorkflowNodeSchema
    """ # noqa: E501
    uuid: StrictStr
    workflow_uuid: StrictStr
    name: StrictStr
    node_type: StrictStr
    node_subtype: StrictStr
    trigger_type: Optional[StrictStr]
    parameters: Dict[str, Any]
    position_x: Union[StrictFloat, StrictInt]
    position_y: Union[StrictFloat, StrictInt]
    notes: StrictStr
    is_disabled: StrictBool
    created_at: datetime
    updated_at: datetime
    metadata: Dict[str, Any]
    __properties: ClassVar[List[str]] = ["uuid", "workflow_uuid", "name", "node_type", "node_subtype", "trigger_type", "parameters", "position_x", "position_y", "notes", "is_disabled", "created_at", "updated_at", "metadata"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WorkflowNodeSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if trigger_type (nullable) is None
        # and model_fields_set contains the field
        if self.trigger_type is None and "trigger_type" in self.model_fields_set:
            _dict['trigger_type'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WorkflowNodeSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "uuid": obj.get("uuid"),
            "workflow_uuid": obj.get("workflow_uuid"),
            "name": obj.get("name"),
            "node_type": obj.get("node_type"),
            "node_subtype": obj.get("node_subtype"),
            "trigger_type": obj.get("trigger_type"),
            "parameters": obj.get("parameters"),
            "position_x": obj.get("position_x"),
            "position_y": obj.get("position_y"),
            "notes": obj.get("notes"),
            "is_disabled": obj.get("is_disabled"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "metadata": obj.get("metadata")
        })
        return _obj


