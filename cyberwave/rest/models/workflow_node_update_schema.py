# coding: utf-8

"""
    Cyberwave API

    Cyberwave platform REST API. Use 'Bearer YOUR_TOKEN' for authentication.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class WorkflowNodeUpdateSchema(BaseModel):
    """
    WorkflowNodeUpdateSchema
    """ # noqa: E501
    name: Optional[StrictStr] = None
    node_type: Optional[StrictStr] = None
    node_subtype: Optional[StrictStr] = None
    trigger_type: Optional[StrictStr] = None
    parameters: Optional[Dict[str, Any]] = None
    position_x: Optional[Union[StrictFloat, StrictInt]] = None
    position_y: Optional[Union[StrictFloat, StrictInt]] = None
    notes: Optional[StrictStr] = None
    is_disabled: Optional[StrictBool] = None
    metadata: Optional[Dict[str, Any]] = None
    __properties: ClassVar[List[str]] = ["name", "node_type", "node_subtype", "trigger_type", "parameters", "position_x", "position_y", "notes", "is_disabled", "metadata"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WorkflowNodeUpdateSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if node_type (nullable) is None
        # and model_fields_set contains the field
        if self.node_type is None and "node_type" in self.model_fields_set:
            _dict['node_type'] = None

        # set to None if node_subtype (nullable) is None
        # and model_fields_set contains the field
        if self.node_subtype is None and "node_subtype" in self.model_fields_set:
            _dict['node_subtype'] = None

        # set to None if trigger_type (nullable) is None
        # and model_fields_set contains the field
        if self.trigger_type is None and "trigger_type" in self.model_fields_set:
            _dict['trigger_type'] = None

        # set to None if parameters (nullable) is None
        # and model_fields_set contains the field
        if self.parameters is None and "parameters" in self.model_fields_set:
            _dict['parameters'] = None

        # set to None if position_x (nullable) is None
        # and model_fields_set contains the field
        if self.position_x is None and "position_x" in self.model_fields_set:
            _dict['position_x'] = None

        # set to None if position_y (nullable) is None
        # and model_fields_set contains the field
        if self.position_y is None and "position_y" in self.model_fields_set:
            _dict['position_y'] = None

        # set to None if notes (nullable) is None
        # and model_fields_set contains the field
        if self.notes is None and "notes" in self.model_fields_set:
            _dict['notes'] = None

        # set to None if is_disabled (nullable) is None
        # and model_fields_set contains the field
        if self.is_disabled is None and "is_disabled" in self.model_fields_set:
            _dict['is_disabled'] = None

        # set to None if metadata (nullable) is None
        # and model_fields_set contains the field
        if self.metadata is None and "metadata" in self.model_fields_set:
            _dict['metadata'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WorkflowNodeUpdateSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "node_type": obj.get("node_type"),
            "node_subtype": obj.get("node_subtype"),
            "trigger_type": obj.get("trigger_type"),
            "parameters": obj.get("parameters"),
            "position_x": obj.get("position_x"),
            "position_y": obj.get("position_y"),
            "notes": obj.get("notes"),
            "is_disabled": obj.get("is_disabled"),
            "metadata": obj.get("metadata")
        })
        return _obj


