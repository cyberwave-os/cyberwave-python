# coding: utf-8

"""
    Cyberwave API

    Cyberwave platform REST API. Use 'Bearer YOUR_TOKEN' for authentication.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class MLModelSchema(BaseModel):
    """
    MLModelSchema
    """ # noqa: E501
    uuid: StrictStr
    name: StrictStr
    description: StrictStr
    created_at: datetime
    updated_at: datetime
    created_by: StrictStr
    updated_by: StrictStr
    workspace_uuid: StrictStr
    metadata: Dict[str, Any]
    visibility: StrictStr
    tags: List[StrictStr]
    model_external_id: StrictStr
    model_provider_name: StrictStr
    can_take_video_as_input: StrictBool
    can_take_audio_as_input: StrictBool
    can_take_image_as_input: StrictBool
    can_take_text_as_input: StrictBool
    __properties: ClassVar[List[str]] = ["uuid", "name", "description", "created_at", "updated_at", "created_by", "updated_by", "workspace_uuid", "metadata", "visibility", "tags", "model_external_id", "model_provider_name", "can_take_video_as_input", "can_take_audio_as_input", "can_take_image_as_input", "can_take_text_as_input"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MLModelSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MLModelSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "uuid": obj.get("uuid"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "created_by": obj.get("created_by"),
            "updated_by": obj.get("updated_by"),
            "workspace_uuid": obj.get("workspace_uuid"),
            "metadata": obj.get("metadata"),
            "visibility": obj.get("visibility"),
            "tags": obj.get("tags"),
            "model_external_id": obj.get("model_external_id"),
            "model_provider_name": obj.get("model_provider_name"),
            "can_take_video_as_input": obj.get("can_take_video_as_input"),
            "can_take_audio_as_input": obj.get("can_take_audio_as_input"),
            "can_take_image_as_input": obj.get("can_take_image_as_input"),
            "can_take_text_as_input": obj.get("can_take_text_as_input")
        })
        return _obj


